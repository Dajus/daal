Please create a complete, production-ready web application based on this specification. Generate all necessary files, folder structure, and implement all features described below. Make it immediately runnable in Replit environment.

# DAAL Web Application - Workplace Safety Training Platform

Create a modern web application for DAAL company (https://daal.cz/), specializing in workplace safety training and employee certification with interactive courses and automated certificate generation.

## Tech Stack:
- **Frontend**: Next.js 14 (App Router) with TypeScript
- **Styling**: Tailwind CSS + Radix UI components
- **Database**: Neon PostgreSQL (free tier)
- **Rich Text Editor**: Quill.js for theory content editing
- **File Storage**: Cloudinary (free tier) for images and media
- **PDF Generation**: jsPDF or Puppeteer for certificates
- **Authentication**: NextAuth.js or custom JWT implementation
- **Deployment**: Vercel (optimal for Next.js)

## Application Structure:

### 1. Landing Page (/)
**Design**: Modern one-page layout with light blue palette (#3B82F6, #EFF6FF)

**Sections**:
- **Hero**: "Workplace Safety is Our Priority" - with CTA button "Access Courses"
- **Services**: Grid with course cards (icons + descriptions)
- **Statistics**: Number of graduates, courses count, years of experience
- **About Us**: DAAL company info, certifications, experience
- **Contact**: Map, contact details, contact form
- **Footer**: Links, certifications, GDPR info

### 2. Login Modal (/login)
**Two login options**:

#### A) Admin Login
```
┌─────────────────────┐
│ 👨‍💼 Administrator    │
├─────────────────────┤
│ Username            │
│ Password            │
│ [Login]             │
└─────────────────────┘
```

#### B) Student Login
```
┌─────────────────────┐
│ 👤 Course Participant│
├─────────────────────┤
│ Full Name           │
│ Email               │
│ Access Code         │
│ [Enter Course]      │
└─────────────────────┘
```

### 3. Admin Dashboard (/admin)

#### A) Access Code Generation (/admin/codes)
**Form Fields**:
- **Course**: Select dropdown (see course list below)
- **Unlimited Participants**: Toggle switch
- **Participant Count**: Number input (conditional on previous field)
- **Include Test After Theory**: Toggle (default: true)
- **Code Validity**: Date picker (default: +30 days)
- **Company**: Select dropdown (see company list below)

**Code Generation Logic**:
```javascript
// Backend generation for guaranteed uniqueness
function generateCourseCode(courseName) {
  const prefixes = {
    'Školení řidičů řídících služební vozidlo zaměstnavatele': 'DRIV',
    'Školení BOZP a PO': 'BOZP',
    'Theory test': 'THEO',
    'Školení zaměstnanců a OSVČ pro provádění práce ve výškách (PVV)': 'HEIG',
    'Hygiena a první pomoc': 'HYGI',
    'Nakládání s odpady': 'WAST',
    'Školení pro zdravotnické pracovníky - BRC': 'MEDB',
    'Školení pro nezdravotnické pracovníky - BRC': 'NONM',
    'Školení přepravy odpadu - BRC': 'TRAN',
    'Health and Safety (H&S) and Fire Protection (FP) training': 'HSFT',
    'Szkolenia BHP i PPOŻ': 'PLHS',
    'навчання з охорони праці (OHS) та протипожежного захисту (FP)': 'UAHS',
    'Přeprava nebezpečných věcí v praxi - Dohoda ADR': 'HADR'
  };
  
  const prefix = prefixes[courseName] || 'COUR';
  const timestamp = Date.now().toString(36);
  const random = Math.random().toString(36).substring(2, 6);
  
  return `${prefix}${timestamp}${random}`.toUpperCase();
}
```

**After Generation**:
- Display generated codes in a table
- Copy individual codes or all codes at once
- Export to CSV/Excel
- Pre-filled email template for distribution

#### B) Course Content Management (/admin/courses)
**For each course**:

**Theory Management** (/admin/courses/[id]/theory):
- **Quill.js editor** for rich content creation
- **Slide management**: Add/Edit/Delete/Reorder slides
- **Media upload**: Images, videos via Cloudinary integration
- **Preview mode**: See content as students do
- **Version control**: Content change history
- **Bulk operations**: Import/export content

**Test Management** (/admin/courses/[id]/tests):
- **Question management**: Full CRUD operations
- **Question types**: Single choice, Multiple choice, True/False
- **Media in questions**: Images, diagrams support
- **Scoring system**: Points assignment and passing thresholds
- **Randomization**: Question and answer order shuffling
- **Question bank**: Reusable question library

#### C) Analytics Dashboard (/admin/analytics)
- **Overview dashboard**:
  - Active codes count
  - Completion statistics
  - Most popular courses
  - Test success rates
  - Company performance metrics
- **Data exports** for reporting
- **Time-based filtering** and comparisons

### 4. Student Portal (/student)

#### A) Dashboard After Login
**Course Overview**:
```
┌─────────────────────────────────────┐
│ 🎓 Školení BOZP a PO                │
├─────────────────────────────────────┤
│ Progress: ████████░░ 80%             │
│                                     │
│ ✅ Theory Completed                 │
│ ⏳ Test: 2/3 attempts (85% success) │
│                                     │
│ [Continue Course] [Retake Test]     │
└─────────────────────────────────────┘
```

#### B) Theory Walkthrough (/student/course/[code]/theory)
**Features**:
- **Slide-by-slide progress** with navigation controls
- **Bookmark functionality** - mark important slides
- **Progress tracking** - resume where left off
- **Personal notes**: Student notes for each slide
- **Responsive design** - mobile and tablet optimized
- **Accessibility**: Screen reader support, keyboard navigation
- **Estimated reading time** per slide
- **Search functionality** within course content

#### C) Test Interface (/student/course/[code]/test)
**Test Features**:
- **Timer display** (if time limit is set)
- **Progress indicator**: Question X of Y
- **Question navigation** - skip and return to questions
- **Auto-save answers** - prevent data loss
- **Review mode**: Check all answers before submission
- **Hint system** (if enabled by admin)
- **Flagging system** - mark questions for review

#### D) Results and Certificate (/student/course/[code]/certificate)
**After successful completion**:
- **Results overview**: Score, time taken, completion date
- **PDF certificate** including:
  - DAAL company logo
  - Student full name
  - Course title
  - Completion date
  - Success level/percentage
  - QR code for verification
  - Unique certificate ID
- **Download/email options** for certificate
- **Social sharing** capabilities
- **Certificate verification portal**

### 5. Database Schema (PostgreSQL/Neon):

```sql
-- Administrators
CREATE TABLE admins (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  email VARCHAR(100),
  role VARCHAR(20) DEFAULT 'admin',
  last_login TIMESTAMP,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Courses
CREATE TABLE courses (
  id SERIAL PRIMARY KEY,
  name VARCHAR(200) NOT NULL,
  slug VARCHAR(100) UNIQUE NOT NULL,
  abbreviation VARCHAR(10) NOT NULL,
  description TEXT,
  is_active BOOLEAN DEFAULT true,
  passing_score INTEGER DEFAULT 80,
  time_limit_minutes INTEGER,
  max_attempts INTEGER DEFAULT 3,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Companies
CREATE TABLE companies (
  id SERIAL PRIMARY KEY,
  name VARCHAR(200) NOT NULL,
  contact_email VARCHAR(100),
  contact_phone VARCHAR(20),
  address TEXT,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Access codes
CREATE TABLE access_codes (
  id SERIAL PRIMARY KEY,
  code VARCHAR(20) UNIQUE NOT NULL,
  course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE,
  company_id INTEGER REFERENCES companies(id),
  max_participants INTEGER,
  unlimited_participants BOOLEAN DEFAULT false,
  theory_to_test BOOLEAN DEFAULT true,
  valid_until DATE NOT NULL,
  is_active BOOLEAN DEFAULT true,
  usage_count INTEGER DEFAULT 0,
  created_by INTEGER REFERENCES admins(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Theory slides
CREATE TABLE theory_slides (
  id SERIAL PRIMARY KEY,
  course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE,
  title VARCHAR(200),
  content TEXT, -- Quill.js JSON format
  slide_order INTEGER NOT NULL,
  media_urls JSONB DEFAULT '[]',
  estimated_read_time INTEGER DEFAULT 2,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Test questions
CREATE TABLE test_questions (
  id SERIAL PRIMARY KEY,
  course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE,
  question_text TEXT NOT NULL,
  question_type VARCHAR(20) DEFAULT 'single_choice',
  options JSONB NOT NULL,
  correct_answers JSONB NOT NULL,
  explanation TEXT,
  media_url TEXT,
  points INTEGER DEFAULT 1,
  difficulty_level VARCHAR(10) DEFAULT 'medium',
  question_order INTEGER,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Student sessions
CREATE TABLE student_sessions (
  id SERIAL PRIMARY KEY,
  access_code_id INTEGER REFERENCES access_codes(id),
  student_name VARCHAR(100) NOT NULL,
  student_email VARCHAR(100) NOT NULL,
  theory_started_at TIMESTAMP,
  theory_completed_at TIMESTAMP,
  theory_progress JSONB DEFAULT '{}',
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Test attempts
CREATE TABLE test_attempts (
  id SERIAL PRIMARY KEY,
  student_session_id INTEGER REFERENCES student_sessions(id) ON DELETE CASCADE,
  answers JSONB NOT NULL,
  score INTEGER NOT NULL,
  max_score INTEGER NOT NULL,
  percentage DECIMAL(5,2) NOT NULL,
  passed BOOLEAN NOT NULL,
  time_taken_seconds INTEGER,
  started_at TIMESTAMP NOT NULL,
  completed_at TIMESTAMP,
  attempt_number INTEGER DEFAULT 1,
  ip_address INET
);

-- Certificates
CREATE TABLE certificates (
  id SERIAL PRIMARY KEY,
  student_session_id INTEGER REFERENCES student_sessions(id),
  test_attempt_id INTEGER REFERENCES test_attempts(id),
  certificate_number VARCHAR(50) UNIQUE NOT NULL,
  certificate_url TEXT,
  verification_code VARCHAR(100) UNIQUE NOT NULL,
  qr_code_url TEXT,
  issued_at TIMESTAMP DEFAULT NOW(),
  is_valid BOOLEAN DEFAULT true
);

-- Audit log
CREATE TABLE audit_logs (
  id SERIAL PRIMARY KEY,
  user_id INTEGER,
  user_type VARCHAR(20),
  action VARCHAR(100) NOT NULL,
  entity_type VARCHAR(50),
  entity_id INTEGER,
  old_values JSONB,
  new_values JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_access_codes_code ON access_codes(code);
CREATE INDEX idx_access_codes_valid ON access_codes(valid_until, is_active);
CREATE INDEX idx_student_sessions_email ON student_sessions(student_email);
CREATE INDEX idx_test_attempts_session ON test_attempts(student_session_id);
CREATE INDEX idx_certificates_verification ON certificates(verification_code);
CREATE INDEX idx_theory_slides_course_order ON theory_slides(course_id, slide_order);
CREATE INDEX idx_test_questions_course_order ON test_questions(course_id, question_order);
```

### 6. Course and Company Lists:

**Courses**:
```javascript
const courses = [
  "Školení řidičů řídících služební vozidlo zaměstnavatele",
  "Školení BOZP a PO",
  "Theory test",
  "Školení zaměstnanců a OSVČ pro provádění práce ve výškách (PVV)",
  "Hygiena a první pomoc",
  "Nakládání s odpady",
  "Školení pro zdravotnické pracovníky - BRC",
  "Školení pro nezdravotnické pracovníky - BRC",
  "Školení přepravy odpadu - BRC",
  "Health and Safety (H&S) and Fire Protection (FP) training",
  "Szkolenia BHP i PPOŻ",
  "навчання з охорони праці (OHS) та протипожежного захисту (FP)",
  "Přeprava nebezpečných věcí v praxi - Dohoda ADR"
];
```

**Companies**:
```javascript
const companies = [
  "Build Synergy s.r.o.",
  "Columnate industrial s.r.o.",
  "KMJ TECH FM s.r.o.",
  "Renomé clinic s.r.o.",
  "Pickering Connect s.r.o.",
  "Pickering Interfaces s.r.o.",
  "SATUM CZECH s.r.o.",
  "TOPSTONE s.r.o.",
  "Vas Solution s.r.o.",
  "PFK Medical s.r.o.",
  "Rehabilitační centrum Čeladná s.r.o.",
  "IPH Servis Morava, s.r.o.",
  "Krevní centrum s.r.o.",
  "PC Healthcare s.r.o.",
  "Premier clinic s.r.o.",
  "GREENCZECH ENERGY s.r.o.",
  "Domov sv. Jana Křtitele, s.r.o.",
  "Futra z. s.",
  "SOLID SECURITY s.r.o.",
  "SOLID TDB s.r.o.",
  "MILKEFFEKT, a.s.",
  "FINIDR, s.r.o.",
  "Těšínské papírny, s.r.o.",
  "Pickering Electronics s.r.o.",
  "Daechang Seat s.r.o.",
  "HSF System a.s.",
  "SOLID Group s.r.o.",
  "Distrimed s.r.o.",
  "WALMARK, a.s."
];
```

### 7. API Routes Structure:

```
/api
├── auth/
│   ├── login
│   ├── logout
│   └── verify
├── admin/
│   ├── codes/ (GET, POST, DELETE, PUT)
│   ├── courses/ (GET, POST, PUT, DELETE)
│   ├── analytics/
│   └── users/
├── student/
│   ├── login
│   ├── progress
│   ├── test
│   └── certificate
├── courses/
│   ├── [id]/theory
│   ├── [id]/test
│   └── [id]/questions
└── upload/ (Cloudinary integration)
```

### 8. Security & Performance:

#### Security Features:
- **Input validation** - Frontend and backend validation
- **SQL injection prevention** - Parameterized queries
- **XSS protection** - Content sanitization
- **CSRF protection** - Token-based validation
- **Rate limiting** - Prevent brute force attacks
- **Session management** - Secure JWT implementation
- **Data encryption** - Sensitive data protection
- **Audit logging** - Complete action tracking

#### Performance Optimizations:
- **Database indexing** - Optimized query performance
- **Image optimization** - Cloudinary transformations
- **Caching strategy** - Redis or built-in caching
- **Code splitting** - Next.js automatic optimization
- **CDN integration** - Global content delivery
- **Lazy loading** - Images and components
- **Service Worker** - Offline functionality

### 9. Environment Variables Setup:

```env
# Database
DATABASE_URL=postgresql://user:pass@host:port/dbname

# Cloudinary
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# NextAuth (if using)
NEXTAUTH_URL=https://your-domain.com
NEXTAUTH_SECRET=your_secret_key

# Email Service
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# Application
APP_URL=https://your-domain.com
JWT_SECRET=your_jwt_secret
```

### 10. Seed Data Setup:

```javascript
// Initial admin account
const seedAdmin = {
  username: 'admin',
  password: 'admin123', // Will be hashed
  email: 'admin@daal.cz'
};

// Auto-populate courses and companies from arrays above
// Create sample theory slides and test questions for one course
```

## IMPLEMENTATION REQUIREMENTS:

### ✅ **Essential Features to Implement:**
1. **Complete file structure** - All Next.js pages, components, and API routes
2. **Database migrations** - All tables with proper relationships
3. **Seed data** - Admin user, courses, companies, sample content
4. **Authentication system** - JWT or NextAuth.js implementation
5. **Admin dashboard** - Code generation, course management, analytics
6. **Student portal** - Course access, progress tracking, testing
7. **PDF certificate generation** - Automated certificates with QR codes
8. **Responsive design** - Mobile-first Tailwind CSS implementation
9. **API endpoints** - All CRUD operations for courses, codes, tests
10. **Error handling** - Comprehensive error boundaries and validation

### ✅ **File Structure to Create:**
```
daal-app/
├── app/
│   ├── (auth)/
│   │   └── login/
│   ├── admin/
│   │   ├── codes/
│   │   ├── courses/
│   │   └── analytics/
│   ├── student/
│   │   └── course/[code]/
│   ├── api/
│   │   ├── auth/
│   │   ├── admin/
│   │   ├── student/
│   │   └── courses/
│   ├── components/
│   │   ├── ui/
│   │   ├── admin/
│   │   └── student/
│   ├── lib/
│   │   ├── db.ts
│   │   ├── auth.ts
│   │   └── utils.ts
│   └── globals.css
├── public/
├── package.json
├── tailwind.config.js
├── next.config.js
└── README.md
```

### ✅ **Critical Implementation Notes:**
- **Use TypeScript** for all components and API routes
- **Implement proper error handling** with try-catch blocks
- **Add input validation** on both frontend and API routes
- **Create reusable components** for forms, modals, tables
- **Implement responsive design** with Tailwind CSS
- **Add loading states** for all async operations
- **Include proper TypeScript interfaces** for data structures
- **Implement proper database connection** with connection pooling
- **Add comprehensive comments** in code for maintainability
- **Create proper component hierarchy** with clean separation of concerns

**IMPORTANT**: Make this application immediately runnable in Replit environment with all features working out of the box. Include proper setup instructions and ensure all dependencies are properly configured.